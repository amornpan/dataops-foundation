version: '3.8'

services:
  # ===== DataOps Foundation Main Application =====
  dataops-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: dataops-foundation
    ports:
      - "8080:8080"
    environment:
      - DATAOPS_ENV=development
      - DATAOPS_DB_HOST=mssql-server
      - DATAOPS_DB_PORT=1433
      - DATAOPS_DB_NAME=DataOps
      - DATAOPS_DB_USER=sa
      - DATAOPS_DB_PASSWORD=DataOps123!
      - DATAOPS_REDIS_HOST=redis
      - DATAOPS_PROMETHEUS_HOST=prometheus
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../config:/app/config
    depends_on:
      - mssql-server
      - redis
      - prometheus
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Jenkins CI/CD Server =====
  jenkins:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jenkins
    container_name: dataops-jenkins
    ports:
      - "8081:8080"
      - "50000:50000"
    environment:
      - TZ=Asia/Bangkok
      - JENKINS_OPTS="--httpPort=8080"
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ../:/workspace
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Microsoft SQL Server =====
  mssql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: dataops-mssql
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=DataOps123!
      - MSSQL_PID=Express
    volumes:
      - mssql-data:/var/opt/mssql
      - ../sql/init:/docker-entrypoint-initdb.d
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Redis Cache =====
  redis:
    image: redis:7-alpine
    container_name: dataops-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass DataOps123!
    volumes:
      - redis-data:/data
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Prometheus Monitoring =====
  prometheus:
    image: prom/prometheus:latest
    container_name: dataops-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Grafana Dashboard =====
  grafana:
    image: grafana/grafana-oss:latest
    container_name: dataops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=DataOps123!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Jupyter Notebook =====
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    container_name: dataops-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=DataOps123!
    volumes:
      - ../notebooks:/home/jovyan/work
      - ../data:/home/jovyan/work/data
      - ../src:/home/jovyan/work/src
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== MinIO Object Storage =====
  minio:
    image: minio/minio:latest
    container_name: dataops-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=dataops
      - MINIO_ROOT_PASSWORD=DataOps123!
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Elasticsearch for Logging =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dataops-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Kibana for Log Visualization =====
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dataops-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== Apache Airflow (Optional) =====
  airflow-webserver:
    image: apache/airflow:2.7.0
    container_name: dataops-airflow-webserver
    ports:
      - "8082:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=''
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=DataOps123!
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/logs:/opt/airflow/logs
      - ../airflow/plugins:/opt/airflow/plugins
    depends_on:
      - postgres
    networks:
      - dataops-network
    restart: unless-stopped

  # ===== PostgreSQL for Airflow =====
  postgres:
    image: postgres:13
    container_name: dataops-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dataops-network
    restart: unless-stopped

# ===== Networks =====
networks:
  dataops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===== Volumes =====
volumes:
  # Application data
  jenkins-data:
    driver: local
  mssql-data:
    driver: local
  redis-data:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Development tools
  minio-data:
    driver: local
  elasticsearch-data:
    driver: local
  postgres-data:
    driver: local

# ===== Health Checks =====
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
