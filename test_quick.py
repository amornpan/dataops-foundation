#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DataOps Foundation - Quick Test
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
"""

import os
import sys
import time
from datetime import datetime

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á header ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    print("=" * 70)
    print("üöÄ DataOps Foundation - Quick Test")
    print("=" * 70)
    print(f"‚è∞ Start Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def test_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules"""
    print("üì¶ Testing Module Imports...")
    
    try:
        # Core modules
        import pandas as pd
        import numpy as np
        import yaml
        print("   ‚úÖ Core modules (pandas, numpy, yaml)")
        
        # DataOps modules
        from src.utils.config_manager import ConfigManager
        from src.utils.logger import setup_logger
        from src.data_pipeline.etl_processor import ETLProcessor
        from src.data_quality.quality_checker import DataQualityChecker
        from src.monitoring.metrics_collector import MetricsCollector
        print("   ‚úÖ DataOps modules")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Import error: {e}")
        return False

def test_configuration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
    print("\n‚öôÔ∏è Testing Configuration...")
    
    try:
        from src.utils.config_manager import ConfigManager
        
        config = ConfigManager('config/config.yaml')
        validation = config.validate_config()
        
        print(f"   Configuration Status: {'‚úÖ VALID' if validation['valid'] else '‚ùå INVALID'}")
        
        if validation['errors']:
            print("   ‚ùå Errors found:")
            for error in validation['errors'][:3]:
                print(f"      - {error}")
                
        if validation['warnings']:
            print("   ‚ö†Ô∏è Warnings found:")
            for warning in validation['warnings'][:3]:
                print(f"      - {warning}")
        
        return validation['valid']
        
    except Exception as e:
        print(f"   ‚ùå Configuration error: {e}")
        return False

def test_sample_data_generation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    print("\nüè≠ Testing Sample Data Generation...")
    
    try:
        sys.path.insert(0, 'examples')
        from examples.generate_sample_data import generate_loan_data
        
        print("   Generating 100 sample records...")
        df = generate_loan_data(100, 'temp/test_data.csv')
        
        print(f"   ‚úÖ Generated {len(df)} records with {len(df.columns)} columns")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Sample data generation error: {e}")
        return False

def test_etl_processor():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ETL Processor"""
    print("\nüîÑ Testing ETL Processor...")
    
    try:
        from src.data_pipeline.etl_processor import ETLProcessor
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        test_file = 'temp/test_data.csv'
        if not os.path.exists(test_file):
            print("   ‚ö†Ô∏è Test data file not found, skipping ETL test")
            return True
        
        processor = ETLProcessor()
        result = processor.load_data(test_file)
        
        if result.success:
            print(f"   ‚úÖ ETL test passed - processed {result.processed_records} records")
            return True
        else:
            print(f"   ‚ùå ETL test failed: {result.errors}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå ETL processor error: {e}")
        return False

def test_data_quality():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Data Quality Checker"""
    print("\nüìä Testing Data Quality Checker...")
    
    try:
        import pandas as pd
        from src.data_quality.quality_checker import DataQualityChecker
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_data = pd.DataFrame({
            'id': [1, 2, 3, 4, 5],
            'name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
            'age': [25, 30, 35, 28, 32],
            'salary': [50000, 60000, 70000, 55000, 65000]
        })
        
        checker = DataQualityChecker()
        result = checker.run_checks(test_data)
        
        print(f"   ‚úÖ Quality Score: {result.overall_score:.1f}%")
        print(f"   ‚úÖ Grade: {result.grade}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Data quality checker error: {e}")
        return False

def test_monitoring():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Monitoring System"""
    print("\nüìà Testing Monitoring System...")
    
    try:
        from src.monitoring.metrics_collector import MetricsCollector
        
        collector = MetricsCollector()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
        collector.record_metric('test_metric', 75.5, {'unit': 'percent'})
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
        overview = collector.get_system_overview()
        
        print(f"   ‚úÖ Monitoring system status: {overview['monitoring_status']}")
        print(f"   ‚úÖ Total metrics collected: {overview['total_metrics_collected']}")
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        collector.stop_monitoring_service()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Monitoring system error: {e}")
        return False

def test_logging():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Logging System"""
    print("\nüìù Testing Logging System...")
    
    try:
        from src.utils.logger import setup_logger
        
        logger = setup_logger('test_logger')
        
        logger.info("Test log message")
        logger.debug("Test debug message")
        logger.warning("Test warning message")
        
        print("   ‚úÖ Logging system working")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Logging system error: {e}")
        return False

def cleanup():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("\nüßπ Cleaning up...")
    
    cleanup_files = [
        'temp/test_data.csv'
    ]
    
    for file_path in cleanup_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"   üóëÔ∏è Removed {file_path}")
            except:
                pass

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print_header()
    
    tests = [
        ("Module Imports", test_imports),
        ("Configuration", test_configuration),
        ("Sample Data Generation", test_sample_data_generation),
        ("ETL Processor", test_etl_processor),
        ("Data Quality Checker", test_data_quality),
        ("Monitoring System", test_monitoring),
        ("Logging System", test_logging)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    start_time = time.time()
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"\n‚ùå {test_name} failed with exception: {e}")
    
    end_time = time.time()
    duration = end_time - start_time
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "=" * 70)
    print("üìä Test Results Summary:")
    print("=" * 70)
    print(f"‚úÖ Passed: {passed_tests}/{total_tests} tests")
    print(f"‚ùå Failed: {total_tests - passed_tests}/{total_tests} tests")
    print(f"‚è±Ô∏è Duration: {duration:.2f} seconds")
    print(f"üìà Success Rate: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ All tests passed! DataOps Foundation is ready to use.")
        status = "SUCCESS"
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the error messages above.")
        status = "PARTIAL"
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    cleanup()
    
    print(f"\n‚è∞ End Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    return status

if __name__ == "__main__":
    result = main()
    
    # Exit with appropriate code
    if result == "SUCCESS":
        sys.exit(0)
    else:
        sys.exit(1)
